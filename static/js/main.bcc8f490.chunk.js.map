{"version":3,"sources":["components/navbar/navbar.component.jsx","components/home/home.component.jsx","components/people/people.component.jsx","components/planets/planets.component.jsx","components/starships/starships.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Navbar","Menu","className","inverted","Container","to","Item","name","Home","href","target","People","data","Grid","columns","map","people","i","Column","key","Card","Content","Header","Description","height","mass","hair_color","Planets","planet","rotation_period","orbital_period","diameter","climate","terrain","surface_water","population","Starships","starship","starship_class","model","manufacturer","max_atmosphering_speed","passengers","App","useState","setPeople","planets","setPlanets","starships","setStarships","loading","setLoading","useEffect","a","async","fetch","result","json","results","fetchPeople","fetchPlanets","fetchStarships","Dimmer","active","Loader","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bcc8f490.chunk.js","sourcesContent":["import React from 'react';\nimport { Menu, Container } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\nimport './navbar.styles.css';\n\nexport const Navbar = () => (\n    <Menu className=\"navbar\" inverted>\n        <Container>\n            <Link to='/star-wars-API'>\n                <Menu.Item name=\"star wars api\"></Menu.Item>\n            </Link>\n            <Link to='/star-wars-API/people'>\n                <Menu.Item name=\"people\"></Menu.Item>\n            </Link>\n            <Link to='/star-wars-API/planets'>\n                <Menu.Item name=\"planets\"></Menu.Item>\n            </Link>\n            <Link to='/star-wars-API/starships'>\n                <Menu.Item name=\"starships\"></Menu.Item>\n            </Link>        \n        </Container>\n    </Menu>\n)","import React from 'react';\n\nexport const Home = () =>  {\n    return (\n        <div className=\"intro\">\n          <h1>Star Wars API</h1>\n          <p>\n            This is just a simple ReactJS project consuming the Star Wars API; \n            showing details of characters, planets and starships from the Star Wars Universe.\n          </p>\n          <p>\n            The fundamentals of using react-router and react semantic-ui are covered here.\n          </p>\n          <p>\n            Visit the api documentation <a href=\"https://swapi.co/\" target=\"_blank\">here</a>\n          </p>\n        </div>\n    )\n}\n","import React from 'react';\nimport { Card, Grid } from 'semantic-ui-react';\n\nexport const People = ({data}) => (\n    <>\n        <h1>People</h1>\n        <Grid columns={3}>\n            {data.map((people, i) => (\n            <Grid.Column key={i}>\n                <Card>\n                    <Card.Content>\n                        <Card.Header>{people.name}</Card.Header>\n                        <Card.Description>\n                            <strong>Height</strong>\n                            <p>{people.height}</p>\n                            <strong>Mass</strong>\n                            <p>{people.mass}</p>\n                            <strong>Hair Color</strong>\n                            <p>{people.hair_color}</p>\n                        </Card.Description>\n                    </Card.Content>\n                </Card>\n            </Grid.Column>\n            ))}\n        </Grid>\n    </>\n)","import React from 'react';\nimport { Card, Grid } from 'semantic-ui-react';\n\nexport const Planets = ({data}) => (\n    <>\n        <h1>Planets</h1>\n        <Grid columns={3}>\n            {data.map((planet, i) => (\n            <Grid.Column key={i}>\n                <Card>\n                    <Card.Content>\n                        <Card.Header>{planet.name}</Card.Header>\n                        <Card.Description>\n                            <strong>Rotation Period</strong>\n                            <p>{planet.rotation_period}</p>\n                            <strong>Orbital Period</strong>\n                            <p>{planet.orbital_period}</p>\n                            <strong>Diameter</strong>\n                            <p>{planet.diameter}</p>\n                            <strong>Climate</strong>\n                            <p>{planet.climate}</p>\n                            <strong>Terrain</strong>\n                            <p>{planet.terrain}</p>\n                            <strong>Surface Water</strong>\n                            <p>{planet.surface_water}</p>\n                            <strong>Population</strong>\n                            <p>{planet.population}</p>\n                        </Card.Description>\n                    </Card.Content>\n                </Card>\n            </Grid.Column>\n            ))}\n        </Grid>\n    </>\n)","import React from 'react';\nimport { Card, Grid } from 'semantic-ui-react';\nimport './starships.styles.css';\n\nexport const Starships = ({data}) => (\n    <>\n    <h1>Starships</h1>\n        <Grid columns={3}>\n            {data.map((starship, i) => (\n            <Grid.Column key={i}>\n                <Card>\n                    <Card.Content>\n                        <Card.Header>{starship.name}</Card.Header>\n                        <Card.Description>\n                            <strong>Starship Class</strong>\n                            <p>{starship.starship_class}</p>\n                            <strong>Model</strong>\n                            <p>{starship.model}</p>\n                            <strong>Manufacturer</strong>\n                            <p>{starship.manufacturer}</p>\n                            <strong>Max Atmosphering Speed</strong>\n                            <p>{starship.max_atmosphering_speed}</p>\n                            <strong>Passengers</strong>\n                            <p>{starship.passengers}</p>\n                        </Card.Description>\n                    </Card.Content>\n                </Card>\n            </Grid.Column>\n            ))}\n        </Grid>\n    </>\n)","/* eslint-disable no-useless-constructor */\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport { Container, Dimmer, Loader } from 'semantic-ui-react';\n\n\nimport { Navbar } from './components/navbar/navbar.component';\nimport { Home } from './components/home/home.component';\nimport { People } from './components/people/people.component';\nimport { Planets } from './components/planets/planets.component';\nimport { Starships } from './components/starships/starships.component';\n\nconst App = () => {\n  const [people, setPeople] = useState([]);\n  const [planets, setPlanets] = useState([]);\n  const [starships, setStarships] = useState([]);\n  const [loading, setLoading] = useState([true])\n\n  useEffect(() => {\n    async function fetchPeople() {\n      let result = await fetch('https://swapi.co/api/people/');\n      let data = await result.json();\n      setPeople(data.results);\n      setLoading(false)\n    }\n\n    async function fetchPlanets() {\n      let result = await fetch('https://swapi.co/api/planets/');\n      let data = await result.json();\n      setPlanets(data.results);\n      setLoading(false)\n    }\n\n    async function fetchStarships() {\n      let result = await fetch('https://swapi.co/api/starships/');\n      let data = await result.json();\n      setStarships(data.results);\n      setLoading(false)\n    }\n\n    fetchPeople();\n    fetchPlanets();\n    fetchStarships();\n  }, [])\n    \n  return(\n    <>\n      <Router>\n        <Navbar />\n        <Container>\n          {loading ? (\n            <Dimmer active inverted>\n              <Loader inverted>Loading</Loader>\n            </Dimmer>\n          ): (\n            <Switch>\n            <Route exact path='/star-wars-API'>\n              <Home />\n            </Route>\n            <Route exact path='/star-wars-API/people'>\n              <People data={people} />\n            </Route>\n            <Route exact path='/star-wars-API/planets'>\n              <Planets data={planets} />\n            </Route>\n            <Route exact path='/star-wars-API/starships'>\n              <Starships data={starships} />\n            </Route>\n          </Switch>\n          )}\n        </Container>\n      </Router>\n    </>\n  )\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}